<project name="CubeBoard" xmlns:ac="antlib:net.sf.antcontrib">
	<taskdef uri="antlib:net.sf.antcontrib" resource="net/sf/antcontrib/antlib.xml" classpath="ant/ant-contrib-1.0b3.jar" />
	<description>Build file for CubeBoard</description>
	<property file="build.properties" />
	<property name="src" location="src" />
	<property name="src_agpl" location="src_agpl" />
	<property name="src_generated" location="src_generated" />
	<property name="src_launcher" location="src_launcher" />
	<property name="src_test" location="src_test" />

	<property name="lib" location="lib" />
	<property name="pluginslib" location="lib/plugins" />
	<property name="build" location="build" />
	<property name="test.build" location="build_test" />
	<property name="installation.dir" location="installation" />
	<property name="javadoc" location="javadoc" />
	<property name="scripts" location="scripts" />
	<property name="resources" location="resources" />
	<property name="resources_generated" location="resources_generated" />
	<property name="sample" location="sample" />
	<property name="license" location="licenses/short_license.txt" />
	<property name="release" location="release" />
	<property name="release.files" location="${release}/files" />
	<property name="release.includes" location="${release}/filesToInclude" />
	<property name="jre32" location="jre/jre32" />
	<property name="jre64" location="jre/jre64" />
	<property name="manual" location="../RapidMinerReferenceManual_en" />
	<property name="manualJar" value="rm_doc.jar" />

	<property name="jreosx" location="jre/osx" />
	<tstamp>
		<format property="current.year" pattern="yyyy" locale="en,UK" />
	</tstamp>
	<property name="bundle.osx.icon" value="rapidminer_frame_icon_64.icns" />

	<property name="junit.tests.dir" value="" />
	<property name="rapidminer.tests.dir" value="../RapidMiner_Tests" />

	<!-- compiler options -->
	<property name="compiler.version" value="modern" />
	<property name="compiler.source" value="1.6" />
	<property name="compiler.target" value="1.6" />
	<property name="compiler.debug" value="true" />
	<property name="compiler.arguments" value="-Xlint:deprecation,finally,unchecked,path,serial" />
	<property name="compiler.deprecation" value="yes" />

	<!-- Update and release server properties -->
	<property file="server.properties" />
	<property file="local-build.properties" />

	<!-- Language variables for getting .properties files -->
	<property name="language" value="de,fr,ja,hu" />

	<!-- Location of changes files -->
	<property name="changes.dir" location="changes" />
	<property name="changes.current" value="${changes.dir}/CHANGES_${cubeboard.longversion}.txt" />

	<property name="makensis" value="makensis" />
	<!-- Assume this is on the PATH -->

	<!-- Class Paths -->
	<path id="rm.classpath">
		<fileset dir="${lib}/">
			<include name="*.jar" />
			<exclude name="plugins/**/*" />
			<exclude name="${lib.exclude}" />
		</fileset>
		<fileset dir="${lib}/freehep">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${lib}/jdbc">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="javadoc.classpath">
		<path refid="rm.classpath" />
		<pathelement location="${java.home}/jre/lib/rt.jar" />
		<pathelement location="${java.home}/../jre/lib/rt.jar" />
		<pathelement location="${java.home}/lib/tools.jar" />
		<pathelement location="${java.home}/../lib/tools.jar" />
		<pathelement location="${java.home}/classes" />
	</path>
	<path id="classpath">
		<path refid="javadoc.classpath" />
		<pathelement location="${build}" />
	</path>


	<target name="init" depends="version.get" unless="lock.isInitialized">
		<tstamp />
		<!-- HTTP and Documentation tasks -->
		<taskdef onerror="fail" resource="antlib.xml" classpath="ant/rapidAntTasks.jar" />

		<!-- RPM Tasks -->
		<taskdef onerror="fail" resource="org/freecompany/redline/ant/antlib.xml" classpath="ant/redline-1.1.3.jar" />

		<!-- FOR Tasks -->
		<taskdef onerror="fail" resource="net/sf/antcontrib/antlib.xml" classpath="ant/ant-contrib-1.0b3.jar" />

		<!-- SCP Tasks -->
		<copy file="ant/jsch-0.1.42.jar" todir="${ant.library.dir}" failonerror="false" />

		<mkdir dir="${build}" />
		<mkdir dir="${test.build}" />
		<mkdir dir="${pluginslib}" />
		<echo file="${pluginslib}/Readme.txt">Copy downloaded plugins into this directory.</echo>
		<mkdir dir="${javadoc}" />
		<mkdir dir="${release}" />

		<property name="lock.isInitialized" value="true" />
	</target>

	<target name="release.prepareDocumentation" depends="init" unless="lock.isDocumentationPrepared">
		<downloadOperatorDocumentation resourcedir="${resources}" namespace="core" operatorsdocfile="resources/com/rapidminer/resources/i18n/OperatorsCoreDocumentation.xml" operatorsfile="resources/com/rapidminer/resources/OperatorsCore.xml" />
		<property name="lock.isDocumentationPrepared" value="true" />
	</target>

	<target name="check.newDocumentationPresent">
		<condition property="lock.newDocumentationPresent">
			<available file="${manual}" type="dir" />
		</condition>
	</target>

	<target name="create-documentation" depends="init, check.newDocumentationPresent" if="lock.newDocumentationPresent" unless="skip.documentation">
		<ant antfile="${manual}/build.xml" dir="${manual}" target="install" />
	</target>

	<target name="clean" unless="lock.isCleaned" description="Delete the build directory, java doc, cubeboard.jar">
		<echo message="Cleaning..." />
		<delete dir="${build}" />
		<delete dir="${test.build}" />
		<delete dir="${javadoc}" />
		<mkdir dir="${build}" />
		<mkdir dir="${javadoc}" />
		<delete>
			<fileset dir="./" defaultexcludes="no" includes="**/*~" />
			<fileset dir="${lib}/" includes="cubeboard.jar" />
			<fileset dir="${lib}/" includes="launcher.jar" />
		</delete>

		<property name="lock.isCleaned" value="true" />
	</target>

	<target name="copy-resources" unless="lock.isCopied" depends="init" description="This copies all resources to the build path.">
		<echo message="Copying resources..." />
		<copy todir="${build}">
			<fileset dir="${resources}" includes="**/*" />
			<fileset dir="${resources_generated}" includes="**/*" />
		</copy>

		<property name="lock.isCopied" value="true" />
	</target>

	<target name="build" depends="init, copy-resources,version.updateFiles, create-documentation, merge.changes, build.common, build.agpl" unless="lock.isBuilt" description="Compiles classes after copying resources to the build directory">

		<property name="lock.isBuilt" value="true" />
	</target>

	<target name="build.common">
		<echo message="CubeBoard: Compile with Java from dir: ${java.home}" />
		<echo message="CubeBoard: using Java version: ${java.version}" />
		<javac debug="${compiler.debug}" destdir="${build}" deprecation="${compiler.deprecation}" compiler="${compiler.version}" nowarn="true" fork="true" memorymaximumsize="400m" includeantruntime="false" target="${compiler.target}" source="${compiler.source}">
			<compilerarg value="${compiler.arguments}" />

			<classpath refid="classpath" />
			<src path="${src}" />
			<src path="${src_generated}" />
			<src path="${src_launcher}" />
			<!-- includes all ... -->
			<include name="**/*.java" />
			<!-- ...but Tests -->
			<!-- <exclude name="**/test/*" /> -->
		</javac>
	</target>

	<target name="build.agpl" unless="build.no_agpl">
		<echo message="Compliling AGPL only sources" />
		<javac debug="${compiler.debug}" destdir="${build}" deprecation="${compiler.deprecation}" compiler="${compiler.version}" nowarn="true" fork="true" memorymaximumsize="400m" includeantruntime="false" target="${compiler.target}" source="${compiler.source}">
			<compilerarg value="${compiler.arguments}" />

			<classpath refid="classpath" />
			<src path="${src_agpl}" />
			<include name="**/*.java" />
		</javac>
	</target>

	<target name="createJar" depends="build" description="Generate the lib/cubeboard.jar file">
		<echo message="Creating jar..." />
		<pathconvert pathsep=" " property="manifest.classpath" refid="rm.classpath" dirsep="/">
			<map from="${lib}/" to="" />
		</pathconvert>
		<echo message="Manifest Classpath: ${manifest.classpath}" />
		<jar jarfile="${lib}/cubeboard.jar" update="false">
			<fileset dir="${build}" excludes="*.class,com/rapid_i/Launcher*.class" includes="**/*" />
			<manifest>
				<attribute name="Specification-Title" value="CubeBoard" />
				<attribute name="Specification-Version" value="${cubeboard.longversion}" />
				<attribute name="Implementation-Title" value="CubeBoard" />
				<attribute name="Implementation-Version" value="${cubeboard.longversion}-${platform}" />
				<attribute name="Implementation-Vendor" value="Cognizeus" />
				<attribute name="Specification-Vendor" value="Cognizeus" />
				<attribute name="Implementation-URL" value="http://www.cognizeus.com" />
				<attribute name="Class-Path" value="launcher.jar ${manifest.classpath}" />
				<attribute name="Main-Class" value="com.rapidminer.gui.RapidMinerGUI" />
			</manifest>
		</jar>
		<jar jarfile="${lib}/launcher.jar" update="true">
			<fileset dir="${build}" excludes="*.class" includes="com/rapid_i/Launcher*.class" />
			<manifest>
				<attribute name="Specification-Title" value="CubeBoardLauncher" />
				<attribute name="Specification-Version" value="${cubeboard.longversion}" />
				<attribute name="Implementation-Title" value="CubeBoardLauncher" />
				<attribute name="Implementation-Version" value="${cubeboard.longversion}-${platform}" />
				<attribute name="Implementation-Vendor" value="Cognizeus" />
				<attribute name="Specification-Vendor" value="Cognizeus" />
				<attribute name="Implementation-URL" value="http://www.cognizeus.com" />
				<attribute name="Class-Path" value="cubeboard.jar ${manifest.classpath}" />
				<attribute name="Main-Class" value="com.rapid_i.Launcher" />
			</manifest>
		</jar>
	</target>


	<target name="release.removeExcludedLib" if="lib.exclude">
		<delete file="${release.files}/lib/${lib.exclude}" failonerror="false" />
	</target>

	<target name="release.prepare" depends="clean, build, release.removeExcludedLib" unless="lock.isPrepared" description="Copies all needed files to the release/files directory">
		<echo message="Preparing Release..." />
		<condition property="lib.exclude.jars" value="lib/${lib.exclude}">
			<isset property="lib.exclude" />
		</condition>
		<mkdir dir="${release.includes}" />
		<copy toDir="${release.files}">
			<fileset dir="./">
				<include name="etc/**/*" />
				<exclude name="etc/rapidminerrc.*" />
				<include name="lib/**/*" />
				<exclude name="lib/plugins/**/*" />
				<exclude name="${lib.exclude.jars}" />
				<include name="resources/**/*" />
				<exclude name="sample/**/*.xml" />
				<exclude name="sample/data/*" />
				<exclude name="sample/*.tmp" />
				<include name="INSTALL.txt" />
				<include name="LICENSE.txt" />
				<include name="CHANGES.txt" />
				<include name="README.txt" />
				<include name="build_extension.xml" />
				<include name="build.xml" />
				<include name="build.properties" />
				<include name="prj.el" />
				<exclude name="server.properties" />
				<include name=".project" />
				<include name=".classpath" />
				<include name="licenses/**/*" />
				<include name="scripts/**/*" />
				<include name="src/**/*" />
				<include name="src_generated/**/*" />
				<include name="src_launcher/**/*" />
				<include name="src_test/**/*" />
				<exclude name="src/**/*.cache" />
			</fileset>
			<fileset dir="${release.includes}">
				<include name="**/*" />
			</fileset>
		</copy>

		<property name="lock.isPrepared" value="true" />
	</target>

	<target name='release.makeRPM' depends='release.prepare' description="This will create a RPM for linux distributions">
		<echo message="Releasing RPM..." />
		<!-- Now creating cubeboard.jar and copy from lib to release path -->
		<antcall target="createJar">
			<param name="platform" value="WIN32" />
		</antcall>
		<copy file="${lib}/cubeboard.jar" todir="${release.files}/lib" />
		<copy file="${lib}/launcher.jar" todir="${release.files}/lib" />

		<taskdef resource="org/freecompany/redline/ant/antlib.xml" classpath="${ant.library.dir}/redline-1.1.3.jar" />
		<rpm architecture='NOARCH' group='Applications' summary="CubeBoard ${cubeboard.shortversion} Community Edition" name='cubeboard' release="1" license="AGPL3" url="http://Cognizeus.com" vendor="Cognizeus GmbH" packager="Marcin Skirzynski" version='${cubeboard.shortversion}' destination='${release}' description="CubeBoard is the world-wide leading open-source data mining solution due to the combination of its leading-edge technologies and its functional range. Applications of CubeBoard cover a wide range of real-world data mining tasks." xmlns="antlib:org.freecompany.redline.ant">
			<zipfileset prefix='/usr/share/rapidminer' dir="${release.files}">
				<include name="**/*" />
				<exclude name="scripts/*.bat" />
			</zipfileset>
			<depends name="java" version="1.6" />
			<link path='/usr/bin/rapidminer' target='/usr/share/rapidminer/scripts/rapidminer' />
			<link path='/usr/bin/rapidminer-gui' target='/usr/share/rapidminer/scripts/RapidMinerGUI' />
		</rpm>
	</target>

	<target name="release.deleteFiles" description="This will remove all temporary stored files if the release is finished.">
		<echo message="Deleting release files..." />
		<delete dir="${release.files}" />
		<delete dir="${release.includes}" />
	</target>

	<target name="release.finish" unless="release.isMultiple" description="This will delete the files stored in release/files after release">
		<!-- now call target for deletion: Is conditioned on property -->
		<ant target="release.deleteFiles" />
	</target>



	<!-- Building release versions -->

	<target name="release.makePlatformIndependent" depends="release.prepare" description="This creates the platform independent zip file">
		<echo message="Releasing Platform independent zip..." />
		<!-- Now creating cubeboard.jar and copy from lib to release path -->
		<antcall target="createJar">
			<param name="platform" value="ANY" />
		</antcall>
		<copy file="${lib}/cubeboard.jar" todir="${release.files}/lib" />
		<copy file="${lib}/launcher.jar" todir="${release.files}/lib" />

		<!-- Now zip everything together and put into release directory -->
		<zip destfile="${release}/cubeboard-${cubeboard.longversion}.zip">
			<zipfileset dir="${release.files}" prefix="cubeboard">
				<include name="**" />
			</zipfileset>
		</zip>

		<!-- Now tidy up release/files if not needed anymore -->
		<ant target="release.finish" />
	</target>
<!-- remove app bundler- skb -->
	<!-- OS X App bundle (http://intransitione.com/blog/take-java-to-app-store/#stepone)-->
	<!-- <taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask" classpath="ant/appbundler-1.0.jar" /> -->

	<target name="release.makeOSXAppBundle" depends="version.get, createJar">
		<bundleapp outputdirectory="${release}" name="CubeBoard" displayname="CubeBoard" identifier="com.rapid_i.RapidMiner" mainclassname="com.rapid_i.Launcher" shortversion="${cubeboard.shortversion}" copyright="${current.year} Cognizeus GmbH" icon="${resources}/com/rapidminer/resources/${bundle.osx.icon}">

			<!--The bundleapp task doesn't support classpathref so all 
	             the run classpath entries must be stated here too. -->
			<classpath file="${lib}/cubeboard.jar" />
			<classpath file="${lib}/launcher.jar" />

			<!--Workaround since the icon parameter for bundleapp 
	             doesn't work. (It's not a bug in AppBundler but 
	             in the JavaAppLauncher, see Known Problems).
	        -->
			<option value="-Xdock:icon=$APP_ROOT/Contents/Resources/${bundle.osx.icon}" />

			<!-- OSX specific options, optional -->
			<option value="-Xdock:name=CubeBoard" />
			<option value="-Dcom.apple.mrj.application.apple.menu.about.name=CubeBoard" />

			<option value="-Xmx1024M" />

			<runtime dir="/Library/Java/JavaVirtualMachines/jdk1.7.0_12.jdk/Contents/Home" />
		</bundleapp>
		<copy todir="${release}/RapidMiner.app/Contents/Java" verbose="true">
			<path refid="rm.classpath" />
		</copy>
	</target>

	<target name="release.makeWin32Launcher">
		<exec executable="${makensis}">
			<arg line="installation/launcher.nsi" />
		</exec>
	</target>

	<target name="release.makeWin64Launcher">
		<exec executable="${makensis}">
			<arg line="installation/launcher_x64.nsi" />
		</exec>
	</target>

	<target name="release.makeUpdater">
		<exec executable="${makensis}">
			<arg line="installation/update.nsi" />
		</exec>
	</target>

	<target name="release.makeWin32" depends="release.prepare" description="This creates the installer for the Windows32 platform">
		<echo message="Releasing Windows32 Installer..." />
		<!-- Now creating cubeboard.jar and copy from lib to release path -->
		<antcall target="createJar">
			<param name="platform" value="WIN32" />
		</antcall>
		<copy file="${lib}/cubeboard.jar" todir="${release.files}/lib" />
		<copy file="${lib}/launcher.jar" todir="${release.files}/lib" />

		<!-- Now build launcher: Will generate release/files/cubeboard.exe -->
		<echo message="Building launcher..." />
		<exec executable="${makensis}">
			<arg line="installation/launcher.nsi" />
		</exec>

		<!-- Now build Updater: Will generate release/files/scripts/CubeBoardUpdate.exe -->
		<echo message="Building Updatefunction..." />
		<exec executable="${makensis}">
			<arg line="installation/update.nsi" />
		</exec>

		<!-- Copy JRE -->
		<echo message="Copying JRE..." />
		<copy todir="${release.files}/jre">
			<fileset dir="${jre32}" />
		</copy>

		<!-- Now build installer: Will generate release/cubeboard-${SHORT_VERSION}x32-install.exe -->
		<echo message="Building installer..." />
		<exec executable="${makensis}">
			<arg line="installation/installer.nsi" />
		</exec>
		<!-- rename it to long version -->
		<echo message="Renaming to long version..." />
		<move tofile="${release}/cubeboard-${cubeboard.longversion}x32-install.exe" file="${release}/cubeboard-${cubeboard.shortversion}x32-install.exe" />

		<!-- delete OS-dependent files: CubeBoard.exe, JRE -->
		<echo message="Deleting OS-dependent files..." />
		<delete file="${release.files}/CubeBoard.exe" />
		<delete dir="${release.files}/jre" />

		<!-- Now tidy up release/files if not needed anymore -->
		<echo message="Cleaning up..." />
		<ant target="release.finish" />
	</target>

	<target name="release.makeWin64" depends="release.prepare" description="This creates the installer for the Windows64 platform">
		<echo message="Releasing Windows64 Installer..." />
		<!-- Now creating cubeboard.jar and copy from lib to release path -->
		<antcall target="createJar">
			<param name="platform" value="WIN64" />
		</antcall>
		<copy file="${lib}/cubeboard.jar" todir="${release.files}/lib" />
		<copy file="${lib}/launcher.jar" todir="${release.files}/lib" />

		<!-- Now build launcher: Will generate release/files/CubeBoard.exe -->
		<exec executable="${makensis}">
			<arg line="installation/launcher_x64.nsi" />
		</exec>

		<!-- Now build Updater: Will generate release/files/scripts/CubeBoardUpdate.exe -->
		<echo message="Building Updatefunction..." />
		<exec executable="${makensis}">
			<arg line="installation/update.nsi" />
		</exec>

		<!-- Copy JRE -->
		<copy todir="${release.files}/jre">
			<fileset dir="${jre64}" />
		</copy>

		<!-- Now build installer: Will generate release/cubeboard-${SHORT_VERSION}x64-install.exe -->
		<exec executable="${makensis}">
			<arg line="installation/installer_x64.nsi" />
		</exec>
		<!-- rename it to long version -->
		<move tofile="${release}/cubeboard-${cubeboard.longversion}x64-install.exe" file="${release}/cubeboard-${cubeboard.shortversion}x64-install.exe" />


		<!-- delete OS-dependent files: CubeBoard.exe, JRE -->
		<delete file="${release.files}/CubeBoard.exe" />
		<delete dir="${release.files}/jre" />

		<!-- Now tidy up release/files if not needed anymore -->
		<ant target="release.finish" />
	</target>

	<target name="release.makeAll" depends="release.prepare" description="This target releases all available platform versions">
		<echo message="Releasing all versions..." />
		<property name="release.isMultiple" value="true" />
		<ant target="release.makePlatformIndependent" />
		<ant target="release.makeWin32" />
		<ant target="release.makeWin64" />

		<!-- Deleting all release files without test -->
		<ant target="release.deleteFiles" />
	</target>

	<target name="release.makeAllNoSources" depends="release.prepare" description="This target releases all available platform versions without the source files">
		<echo message="Releasing all versions (no sources)..." />
		<property name="release.isMultiple" value="true" />

		<delete dir="${release.files}/src" />
		<delete dir="${release.files}/src_generated" />
		<delete dir="${release.files}/src_launcher" />
		<delete dir="${release.files}/src_test" />

		<ant target="release.makePlatformIndependent" />
		<ant target="release.makeWin32" />
		<ant target="release.makeWin64" />

		<!-- Deleting all release files without test -->
		<ant target="release.deleteFiles" />
	</target>



	<!-- Building Updates -->

	<target name="update.makePlatformIndetendent" depends="release.prepare" description="This creates the platform independent zip file">
		<echo message="Releasing Update Platform independent..." />

		<!-- Same as platfrom independent zip file: Call it and rename result -->
		<ant target="release.makePlatformIndependent" />
		<copy file="${release}/cubeboard-${cubeboard.longversion}.zip" tofile="${release}/update_cubeboard-${cubeboard.longversion}.zip" />
	</target>

	<target name="update.makeWin32" depends="release.prepare" description="This creates the installer for the Windows32 platform">
		<echo message="Releasing Windows32 Update..." />
		<!-- Now creating cubeboard.jar and copy from lib to release path -->
		<antcall target="createJar">
			<param name="platform" value="WIN32" />
		</antcall>
		<copy file="${lib}/cubeboard.jar" todir="${release.files}/lib" />
		<copy file="${lib}/launcher.jar" todir="${release.files}/lib" />

		<!-- Now build launcher: Will generate release/files/CubeBoard.exe -->
		<exec executable="${makensis}">
			<arg line="installation/launcher.nsi" />
		</exec>
		
		<!-- Now build Updater: Will generate release/files/scripts/CubeBoardUpdate.exe -->
		<echo message="Building Updatefunction..." />
		<exec executable="${makensis}">
			<arg line="installation/update.nsi" />
		</exec>

		<!-- Copy JRE -->
		<copy todir="${release.files}/jre">
			<fileset dir="${jre32}" />
		</copy>

		<!-- Now zip everything together and put into release directory -->
		<zip destfile="${release}/update_cubeboard-${cubeboard.longversion}x32.zip">
			<zipfileset dir="${release.files}" prefix="cubeboard">
				<include name="**" />
			</zipfileset>
		</zip>

		<!-- delete OS-dependent files: CubeBoard.exe, JRE -->
		<delete file="${release.files}/CubeBoard.exe" />
		<delete dir="${release.files}/jre" />

		<!-- Now tidy up release/files if not needed anymore -->
		<ant target="release.finish" />
	</target>

	<target name="update.makeWin64" depends="release.prepare" description="This creates the installer for the Windows64 platform">
		<echo message="Releasing Windows64 Update..." />
		<!-- Now creating cubeboard.jar and copy from lib to release path -->
		<antcall target="createJar">
			<param name="platform" value="WIN64" />
		</antcall>
		<copy file="${lib}/cubeboard.jar" todir="${release.files}/lib" />
		<copy file="${lib}/launcher.jar" todir="${release.files}/lib" />

		<!-- Now build launcher: Will generate release/files/CubeBoard.exe -->
		<exec executable="${makensis}">
			<arg line="installation/launcher_x64.nsi" />
		</exec>
		
		<!-- Now build Updater: Will generate release/files/scripts/CubeBoardUpdate.exe -->
	<echo message="Building Updatefunction..." />
	<exec executable="${makensis}">
		<arg line="installation/update.nsi" />
	</exec>

		<!-- Copy JRE -->
		<copy todir="${release.files}/jre">
			<fileset dir="${jre64}" />
		</copy>

		<!-- Now zip everything together and put into release directory -->
		<zip destfile="${release}/update_cubeboard-${cubeboard.longversion}x64.zip">
			<zipfileset dir="${release.files}" prefix="cubeboard">
				<include name="**" />
			</zipfileset>
		</zip>

		<!-- delete OS-dependent files: CubeBoard.exe, JRE -->
		<delete file="${release.files}/CubeBoard.exe" />
		<delete dir="${release.files}/jre" />

		<!-- Now tidy up release/files if not needed anymore -->
		<ant target="release.finish" />
	</target>

	<target name="update.makeAll" depends="release.prepare" description="This target releases all available platform versions">
		<echo message="Releasing all platform updates..." />
		<property name="release.isMultiple" value="true" />
		<ant target="update.makePlatformIndetendent" />
		<ant target="update.makeWin32" />
		<ant target="update.makeWin64" />

		<!-- Deleting all release files without test -->
		<ant target="release.deleteFiles" />
	</target>



	<!-- BEGIN Test targets -->
	<target name="test.build" depends="test.clean">
		<mkdir dir="${test.build}" />
		<javac debug="${compiler.debug}" destdir="${test.build}" deprecation="${compiler.deprecation}" compiler="${compiler.version}" nowarn="true" fork="true" memorymaximumsize="400m" target="${compiler.target}" source="${compiler.source}">

			<classpath refid="classpath" />
			<src path="${src_test}" />
			<!--<src path="${src}/com/rapidminer/test_utils" /> -->
		</javac>
	</target>

	<target name="test.clean" depends="test.clean.dir.check" if="test.clean.dir.exists">
		<ant antfile="${rapidminer.tests.dir}/build.xml" target="test.clean" dir="${rapidminer.tests.dir}" inheritall="true" />
	</target>

	<target name="test.clean.dir.check">
		<condition property="test.clean.dir.exists">
			<available file="${rapidminer.tests.dir}" type="dir" />
		</condition>
	</target>

	<target name="test.createJar" depends="createJar,test.build" description="Generate the lib/cubeboard.jar file">
		<echo message="Creating jar..." />
		<!--<pathconvert pathsep=" " property="manifest.classpath" refid="rm.classpath" 
			dirsep="/"> <map from="${lib}/" to="" /> </pathconvert> <echo message="Manifest 
			Classpath: ${manifest.classpath}" /> -->
		<jar jarfile="${lib}/cubeboard_test.jar" update="false">
			<fileset dir="${test.build}" includes="**/*" />
			<manifest>
				<attribute name="Specification-Title" value="CubeBoard Tests" />
				<attribute name="Specification-Version" value="${cubeboard.longversion}" />
				<attribute name="Implementation-Title" value="CubeBoard Tests" />
				<attribute name="Implementation-Version" value="${cubeboard.longversion}-${platform}" />
				<attribute name="Implementation-Vendor" value="Cognizeus" />
				<attribute name="Specification-Vendor" value="Cognizeus" />
				<attribute name="Implementation-URL" value="http://www.cognizeus.com" />
				<attribute name="Class-Path" value="cubeboard.jar ${manifest.classpath}" />
			</manifest>
		</jar>
	</target>


	<target name="test">
		<ant antfile="${rapidminer.tests.dir}/build.xml" target="test" dir="${rapidminer.tests.dir}" inheritall="false" />
	</target>
	<!-- END Test targets -->

	<!-- Version handling -->

	<target name="version.get">
		<property name="cubeboard.shortversion" value="${cubeboard.version}.${cubeboard.revision}" />
		<property name="cubeboard.longversion" value="${cubeboard.version}.${cubeboard.revision}.${cubeboard.update}" />
		<echo message="Long version: ${cubeboard.longversion}; short version: ${cubeboard.shortversion}" />

		<!-- ant target="version.updateFiles" / -->
	</target>

	<target name="version.increaseUpdate" description="This might be called seperately to increase the update number of the version.">
		<echo message="Increasing Update Number..." />

		<propertyfile file="build.properties">
			<entry type="int" key="cubeboard.update" operation="+" value="1" pattern="000" />
		</propertyfile>

		<property name="cubeboard.shortversion" value="${cubeboard.version}.${cubeboard.revision}" />
		<property name="cubeboard.longversion" value="${cubeboard.version}.${cubeboard.revision}.${cubeboard.update}" />

		<ant target="version.updateFiles" />
	</target>

	<target name="version.updateFiles">
		<property name="cubeboard.shortversion" value="${cubeboard.version}.${cubeboard.revision}" />
		<property name="cubeboard.longversion" value="${cubeboard.version}.${cubeboard.revision}.${cubeboard.update}" />

		<!-- Installer version -->
		<mkdir dir="installation" />
		<echo file="installation/version.nsi">
			!define SHORT_VERSION ${cubeboard.shortversion}
			!define LONG_VERSION ${cubeboard.longversion}.0
		</echo>

		<!-- Version.java -->
		<replaceregexp file="${src}/com/rapidminer/RapidMinerVersion.java" match="VERSION_STRING = &quot;(.*)&quot;;" replace="VERSION_STRING = &quot;${cubeboard.longversion}&quot;;" />
		<echo message="Updating to version ${cubeboard.longversion}" />
		<!-- <delete file="${src}/com/rapidminer/RapidMinerVersion.java" /> <copy 
			file="${license}" tofile="${src}/com/rapidminer/RapidMinerVersion.java" /> 
			<echo file="${src}/com/rapidminer/RapidMinerVersion.java" append="true">package 
			com.rapidminer; import com.rapidminer.gui.tools.VersionNumber; /** This class 
			is generated by the ant target &quot;version.updateFiles&quot; to ensure 
			the correct version number in RapidMiner. */ public class RapidMinerVersion 
			extends VersionNumber { public RapidMinerVersion() {super("${cubeboard.longversion}");} 
			}</echo> -->
	</target>


	<!-- StyleChecks -->

	<target name="check.countTotalLines" depends="build" description="Prints the total amount of written lines.">
		<echo message="Count lines of CubeBoard core..." />
		<java classname="StyleCheck" classpath="${build}">
			<arg value="total_lines" />
			<arg value="${src}" />
		</java>
	</target>
	<target name="check.listBigClasses" depends="build" description="Prints all classes with a high number of lines.">
		<java classname="StyleCheck" classpath="${build}">
			<arg value="size_check" />
			<arg value="800" />
			<arg value="${src}" />
		</java>
	</target>
	<target name="check.comments" depends="build" description="Prints all classes with a missing class comment.">
		<java classname="StyleCheck" classpath="${build}">
			<arg value="comment_check" />
			<arg value="${src}" />
		</java>
	</target>
	<target name="check.authorTags" depends="build" description="Prints all classes with a missing '@author' tag.">
		<java classname="StyleCheck" classpath="${build}" failonerror="true">
			<arg value="author_check" />
			<arg value="${src}" />
		</java>
		<java classname="StyleCheck" classpath="${build}" failonerror="true">
			<arg value="author_check" />
			<arg value="${src_test}" />
		</java>
	</target>
	<target name="check.listAuthorLines" depends="build" description="Prints all authors and the number of classes and lines they wrote.">
		<java classname="StyleCheck" classpath="${build}">
			<arg value="all_authors" />
			<arg value="${src}/com" />
		</java>
	</target>
	<target name="check.listAuthorClasses" depends="build" description="Prints all classes written by a specific author.">
		<input addproperty="check.author" message="The name of the author to list his classes?" />
		<java classname="StyleCheck" classpath="${build}">
			<arg value="author_list" />
			<arg value="${src}/com" />
			<arg value="${check.author}" />
		</java>
	</target>
	<target name="check.license" depends="build" description="Prints all classes with a missing license.">
		<java classname="StyleCheck" classpath="${build}" failonerror="true">
			<arg value="license_check" />
			<arg value="${license}" />
			<arg value="${src}" />
		</java>
		<java classname="StyleCheck" classpath="${build}" failonerror="true">
			<arg value="license_check" />
			<arg value="${license}" />
			<arg value="${src_test}" />
		</java>
	</target>
	<target name="check.listOperators" depends="build" description="Prints all operator names of the core in a grouped list.">
		<java classname="OperatorListCreator">
			<classpath refid="classpath" />
			<arg value="operator_list.txt" />
		</java>
	</target>
	<target name="check.prependLicense" depends="build" description="Prepend license terms to the java files">
		<java classname="LicensePrepender" classpath="${build}">
			<arg value="${license}" />
			<arg value="${src}" />
		</java>
		<java classname="LicensePrepender" classpath="${build}">
			<arg value="${license}" />
			<arg value="${src_test}" />
		</java>
	</target>
	<target name="check.removeVersionTags" depends="build" description="Remove the version tags from the class files">
		<java classname="RemoveClassVersionTags" classpath="${build}">
			<arg value="${src}/com/rapidminer" />
		</java>
	</target>

	<!-- Update .properties files from Cognizeus Pootle. You can change the language 
		variables in the property name "language" attribute. -->
	<target name="update.properties" depends="init" description="Updating .properties files">
		<echo message="Getting the following .properties files for languages: ${language}." />
		<ac:for list="${language}" param="language">
			<sequential>
				<get src="http://pootle.rapid-i.com/pootle/@{language}/rapidminer/Errors.properties/download/" dest="${resources_generated}/com/rapidminer/resources/i18n/pootle/Errors_@{language}.properties" verbose="true" usetimestamp="true" />
				<get src="http://pootle.rapid-i.com/pootle/@{language}/rapidminer/GUI.properties/download/" dest="${resources_generated}/com/rapidminer/resources/i18n/pootle/GUI_@{language}.properties" verbose="true" usetimestamp="true" />
				<get src="http://pootle.rapid-i.com/pootle/@{language}/rapidminer/LogMessages.properties/download/" dest="${resources_generated}/com/rapidminer/resources/i18n/pootle/LogMessages_@{language}.properties" verbose="true" usetimestamp="true" />
				<get src="http://pootle.rapid-i.com/pootle/@{language}/rapidminer/PlotterMessages.properties/download/" dest="${resources_generated}/com/rapidminer/resources/i18n/pootle/PlotterMessages_@{language}.properties" verbose="true" usetimestamp="true" />
				<get src="http://pootle.rapid-i.com/pootle/@{language}/rapidminer/UserErrorMessages.properties/download/" dest="${resources_generated}/com/rapidminer/resources/i18n/pootle/UserErrorMessages_@{language}.properties" verbose="true" usetimestamp="true" />
			</sequential>
		</ac:for>
	</target>


	<!-- Merge all Changes files in the changes folder to one file -->
	<target name="merge.changes" depends="init" description="Merge all changes file from folder changes to CHANGES.txt">
		<echo message="Merging all changes files" />
		<concat destfile="CHANGES-ALL.txt" fixlastline="true">
			<sort>
				<fileset dir="${changes.dir}" includes="*.txt" />
				<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
					<name />
				</reverse>
			</sort>
		</concat>
	</target>


	<!-- JavaDoc -->

	<target name="javaDoc.makeZip" depends="javaDoc.generate" description="This generates new java doc from source files a zips them for relase into the release dir.">
		<echo message="Releasing java doc..." />
		<zip destfile="${release}/cubeboard-${cubeboard.longversion}-javadoc.zip">
			<zipfileset dir="./javadoc" prefix="cubeboard-${cubeboard.shortversion}/javadoc/">
				<include name="**/*" />
			</zipfileset>
		</zip>
	</target>

	<target name="javaDoc.generate" depends="init, clean, build" description="Generate the java class documentation">
		<echo message="Generating java doc..." />
		<javadoc sourcepath="${src}" packagenames="com.*" destdir="${javadoc}" maxmemory="900m" author="true" version="true" windowtitle="CubeBoard Class Documentation" use="true">
			<!-- breakiterator="true" -->
			<classpath refid="javadoc.classpath" />
			<doctitle>
				<![CDATA[<h1>CubeBoard ${cubeboard.shortversion} Class Documentation</h1>]]></doctitle>
		<footer>
			<![CDATA[<a href="http://sourceforge.net/projects/yale" target="_blank">
			<img src="http://sflogo.sourceforge.net/sflogo.php?group_id=114160&type=16" width="150" height="40" />
		</a>]]></footer>
	<bottom>
		<![CDATA[<i>Copyright &#169; 2001-2012 by <a href="http://Cognizeus.com" target="_blank">Cognizeus</a>
	</i>]]></bottom>
<!-- Links are not supported here -->
<tag name="rapidminer.todo" description="To do:" />
<tag name="rapidminer.index" description="Keywords:" scope="types" />
<tag name="rapidminer.xmlclass" description="XML classname:" scope="types" />
<taglet name="com.rapidminer.doc.CiteTaglet" path="${build}" />
<taglet name="com.rapidminer.doc.RefTaglet" path="${build}" />
<taglet name="com.rapidminer.doc.ReferenceTaglet" path="${build}" />
<taglet name="com.rapidminer.doc.MathTaglet" path="${build}" />
<taglet name="com.rapidminer.doc.XMLExampleTaglet" path="${build}" />
</javadoc>
</target>

<!-- *********** RPM build *********** -->


<property file="build.rpm.properties" />

<target name="rpm-prepare">

<delete dir="${rpm.dir}" />

<mkdir dir="${rpm.dir}" />
<mkdir dir="${rpm.build.dir}" />
<mkdir dir="${rpm.buildroot.dir}" />
<mkdir dir="${rpm.sources.dir}" />
<mkdir dir="${rpm.specs.dir}" />
<mkdir dir="${rpm.rpms.dir}" />
<mkdir dir="${rpm.srpms.dir}" />

<mkdir dir="${rpm.sources.rapidminer.dir}" />

<copy todir="${rpm.sources.rapidminer.dir}/lib">
<fileset dir="${lib}" />
</copy>
<copy todir="${rpm.sources.rapidminer.dir}/scripts">
<fileset dir="${scripts}">
	<exclude name="*.bat" />
</fileset>

</copy>
<copy todir="${rpm.sources.rapidminer.dir}">
<fileset dir="${rpm.installation.dir}">
	<exclude name="${rpm.spec.file}" />
</fileset>
</copy>

<copy file="${rpm.installation.dir}/${rpm.spec.file}" todir="${rpm.specs.dir}" />
<replace file="${rpm.specs.dir}/${rpm.spec.file}" token="%{_version-from-ant}" value="${cubeboard.version}.${cubeboard.revision}" />


<tar destfile="${rpm.sources.dir}/${rpm.cubeboard.tar}" basedir="${rpm.sources.dir}" />
<gzip destfile="${rpm.sources.dir}/${rpm.cubeboard.tar.gz}" src="${rpm.sources.dir}/${rpm.cubeboard.tar}" />

<delete file="${rpm.sources.dir}/${rpm.cubeboard.tar}" />


</target>

<target name="rpm-build" depends="createJar,rpm-prepare" description="Builds a RPM package. Works only on linux computer with rpm installed">
<rpm specFile="rapidminer.spec" topDir="${rpm.dir}" command="-ba" cleanBuildDir="false" failOnError="true" />

<copy todir="${rpm.dir}/">
<fileset dir="${rpm.dir}/RPMS/noarch/" />
</copy>
</target>


<target name="wsimport.repository" description="Import the WSDL description of the Repository Web Service.">
<mkdir dir="${src_generated}" />
<exec executable="wsimport" dir="${basedir}">
<arg value="-Xdebug" />
<arg value="-keep" />
<arg value="-p" />
<arg value="com.rapid_i.repository.wsimport" />
<arg value="-s" />
<arg file="${src_generated}" />
<arg value="-Xnocompile" />
<arg value="-extension" />
<arg value="http://localhost:8080/RAWS/RepositoryService?wsdl" />
</exec>
<exec executable="wsimport" dir="${basedir}">
<arg value="-Xdebug" />
<arg value="-keep" />
<arg value="-p" />
<arg value="com.rapid_i.repository.wsimport" />
<arg value="-s" />
<arg file="${src_generated}" />
<arg value="-Xnocompile" />
<arg value="-extension" />
<arg value="http://localhost:8080/RAWS/ProcessService?wsdl" />
</exec>

<exec executable="wsimport" dir="${basedir}">
<arg value="-Xdebug" />
<arg value="-keep" />
<arg value="-p" />
<arg value="com.rapid_i.repository.wsimport.mgt" />
<arg value="-s" />
<arg file="${src_generated}" />
<arg value="-Xnocompile" />
<arg value="-extension" />
<arg value="http://localhost:8080/RAWS/ManagementService?wsdl" />
</exec>

<exec executable="wsimport" dir="${basedir}">
<arg value="-Xdebug" />
<arg value="-keep" />
<arg value="-p" />
<arg value="com.rapid_i.repository.wsimport" />
<arg value="-s" />
<arg file="${src_generated}" />
<arg value="-Xnocompile" />
<arg value="-extension" />
<arg value="http://localhost:8080/RAWS/ProcessService_1_3?wsdl" />
</exec>

<exec executable="wsimport" dir="${basedir}">
<arg value="-Xdebug" />
<arg value="-keep" />
<arg value="-p" />
<arg value="com.rapid_i.repository.wsimport" />
<arg value="-s" />
<arg file="${src_generated}" />
<arg value="-Xnocompile" />
<arg value="-extension" />
<arg value="http://localhost:8080/RAWS/RAInfoService?wsdl" />
</exec>
</target>

<target name="wsimport.marketplace">
<exec executable="wsimport" dir="${basedir}">
<arg value="-Xdebug" />
<arg value="-keep" />
<arg value="-p" />
<arg value="com.rapidminer.deployment.client.wsimport" />
<arg value="-s" />
<arg file="${src_generated}" />
<arg value="-Xnocompile" />
<arg value="-extension" />
<arg value="http://localhost:8080/UpdateServer/UpdateServiceService?wsdl" />
</exec>

</target>
<target name="signJars" depends="createJar" description="Don't forget to add jarsign.alias and jarsign.storepass to the file server.properties">
<signjar lazy="true" alias="${jarsign.alias}" storepass="${jarsign.storepass}">
<path>
	<fileset dir="${lib}" includes="**/*.jar" />
</path>
</signjar>
</target>
</project>